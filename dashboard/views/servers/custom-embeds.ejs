<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Embeds - WardenPrime Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/style.css" rel="stylesheet">
    <style>
        .embed-preview {
            background: #2f3136;
            border-radius: 8px;
            padding: 16px;
            margin: 16px 0;
            font-family: 'Whitney', 'Helvetica Neue', Helvetica, Arial, sans-serif;
            color: #dcddde;
            max-width: 520px;
        }
        .embed-preview .embed-title {
            color: #ffffff;
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 8px;
        }
        .embed-preview .embed-description {
            color: #dcddde;
            font-size: 14px;
            line-height: 1.4;
            margin-bottom: 8px;
        }
        .embed-preview .embed-fields {
            margin: 8px 0;
        }
        .embed-preview .embed-field {
            margin-bottom: 8px;
        }
        .embed-preview .embed-field-name {
            color: #ffffff;
            font-weight: 600;
            font-size: 14px;
        }
        .embed-preview .embed-field-value {
            color: #dcddde;
            font-size: 14px;
            margin-top: 2px;
        }
        .embed-preview .embed-footer {
            color: #72767d;
            font-size: 12px;
            margin-top: 8px;
        }
        .embed-preview .embed-timestamp {
            color: #72767d;
            font-size: 12px;
            margin-top: 8px;
        }
        .color-picker {
            width: 50px;
            height: 38px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .field-row {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
            background: #f8f9fa;
        }
        .field-row .btn-remove {
            color: #dc3545;
            border: none;
            background: none;
            font-size: 18px;
            padding: 0;
            margin-left: 8px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="fas fa-shield-alt me-2"></i>WardenPrime Admin
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/dashboard">
                            <i class="fas fa-tachometer-alt me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/servers">
                            <i class="fas fa-server me-1"></i>Servers
                        </a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="fas fa-user me-1"></i><%= user.username %>#<%= user.discriminator %>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/logout">
                                <i class="fas fa-sign-out-alt me-1"></i>Logout
                            </a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1><i class="fas fa-palette me-2"></i>Custom Embeds</h1>
                    <div class="btn-group">
                        <button class="btn btn-success" onclick="sendEmbed()">
                            <i class="fas fa-paper-plane me-1"></i>Send Embed
                        </button>
                        <button class="btn btn-primary" onclick="saveTemplate()">
                            <i class="fas fa-save me-1"></i>Save Template
                        </button>
                    </div>
                </div>

                <div class="row">
                    <!-- Embed Builder -->
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-edit me-2"></i>Embed Builder</h5>
                            </div>
                            <div class="card-body">
                                <form id="embedForm">
                                    <!-- Basic Settings -->
                                    <div class="mb-3">
                                        <label for="embedTitle" class="form-label">Title</label>
                                        <input type="text" class="form-control" id="embedTitle" placeholder="Enter embed title">
                                    </div>

                                    <div class="mb-3">
                                        <label for="embedDescription" class="form-label">Description</label>
                                        <textarea class="form-control" id="embedDescription" rows="3" placeholder="Enter embed description"></textarea>
                                    </div>

                                    <div class="mb-3">
                                        <label for="embedColor" class="form-label">Color</label>
                                        <div class="d-flex align-items-center">
                                            <input type="color" class="color-picker me-3" id="embedColor" value="#5865f2">
                                            <input type="text" class="form-control" id="embedColorHex" placeholder="#5865f2" style="max-width: 120px;">
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="embedThumbnail" class="form-label">Thumbnail URL</label>
                                        <input type="url" class="form-control" id="embedThumbnail" placeholder="https://example.com/image.png">
                                    </div>

                                    <div class="mb-3">
                                        <label for="embedImage" class="form-label">Image URL</label>
                                        <input type="url" class="form-control" id="embedImage" placeholder="https://example.com/image.png">
                                    </div>

                                    <div class="mb-3">
                                        <label for="embedFooter" class="form-label">Footer Text</label>
                                        <input type="text" class="form-control" id="embedFooter" placeholder="Footer text">
                                    </div>

                                    <div class="mb-3">
                                        <label for="embedTimestamp" class="form-label">Timestamp</label>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="embedTimestamp" checked>
                                            <label class="form-check-label" for="embedTimestamp">
                                                Show current timestamp
                                            </label>
                                        </div>
                                    </div>

                                    <!-- Fields Section -->
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <label class="form-label">Fields</label>
                                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="addField()">
                                                <i class="fas fa-plus me-1"></i>Add Field
                                            </button>
                                        </div>
                                        <div id="fieldsContainer">
                                            <!-- Fields will be added here dynamically -->
                                        </div>
                                    </div>

                                    <!-- Channel Selection -->
                                    <div class="mb-3">
                                        <label for="targetChannel" class="form-label">Target Channel</label>
                                        <select class="form-select" id="targetChannel" required>
                                            <option value="">Select a channel...</option>
                                            <% if (guild && guild.channels) { %>
                                                <% guild.channels.forEach(channel => { %>
                                                    <% if (channel.type === 0) { %>
                                                        <option value="<%= channel.id %>">#<%= channel.name %></option>
                                                    <% } %>
                                                <% }); %>
                                            <% } %>
                                        </select>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Live Preview -->
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-eye me-2"></i>Live Preview</h5>
                            </div>
                            <div class="card-body">
                                <div id="embedPreview" class="embed-preview">
                                    <div class="text-muted text-center">
                                        <i class="fas fa-eye-slash me-2"></i>Preview will appear here as you type
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Saved Templates -->
                        <div class="card mt-4">
                            <div class="card-header">
                                <h5><i class="fas fa-bookmark me-2"></i>Saved Templates</h5>
                            </div>
                            <div class="card-body">
                                <div id="templatesList">
                                    <div class="text-muted text-center">
                                        <i class="fas fa-bookmark me-2"></i>No saved templates yet
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let fieldCount = 0;

        // Update preview when form changes
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('embedForm');
            form.addEventListener('input', updatePreview);
            form.addEventListener('change', updatePreview);
            
            // Color picker sync
            document.getElementById('embedColor').addEventListener('change', function() {
                document.getElementById('embedColorHex').value = this.value;
                updatePreview();
            });
            
            document.getElementById('embedColorHex').addEventListener('input', function() {
                // Update color picker if hex is valid
                if (this.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                    document.getElementById('embedColor').value = this.value;
                }
                updatePreview();
            });
        });

        function addField() {
            fieldCount++;
            const container = document.getElementById('fieldsContainer');
            const fieldRow = document.createElement('div');
            fieldRow.className = 'field-row';
            fieldRow.innerHTML = `
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">Field Name</label>
                        <input type="text" class="form-control field-name" placeholder="Field name">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Field Value</label>
                        <textarea class="form-control field-value" rows="2" placeholder="Field value"></textarea>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Inline</label>
                        <div class="form-check">
                            <input class="form-check-input field-inline" type="checkbox" checked>
                        </div>
                        <button type="button" class="btn btn-remove" onclick="removeField(this)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
            container.appendChild(fieldRow);
            
            // Add event listeners to new field
            fieldRow.addEventListener('input', updatePreview);
            fieldRow.addEventListener('change', updatePreview);
        }

        function removeField(button) {
            button.closest('.field-row').remove();
            updatePreview();
        }

        function updatePreview() {
            const preview = document.getElementById('embedPreview');
            const title = document.getElementById('embedTitle').value;
            const description = document.getElementById('embedDescription').value;
            const color = document.getElementById('embedColorHex').value || '#5865f2';
            const thumbnail = document.getElementById('embedThumbnail').value;
            const image = document.getElementById('embedImage').value;
            const footer = document.getElementById('embedFooter').value;
            const showTimestamp = document.getElementById('embedTimestamp').checked;

            let html = '';

            if (title || description || thumbnail || image || footer) {
                // Apply the color as a border-left style to simulate Discord's embed color
                const colorStyle = `border-left: 4px solid ${color};`;
                
                if (title) {
                    html += `<div class="embed-title">${escapeHtml(title)}</div>`;
                }
                
                if (description) {
                    html += `<div class="embed-description">${escapeHtml(description).replace(/\n/g, '<br>')}</div>`;
                }

                // Fields
                const fieldRows = document.querySelectorAll('.field-row');
                if (fieldRows.length > 0) {
                    html += '<div class="embed-fields">';
                    fieldRows.forEach(row => {
                        const name = row.querySelector('.field-name').value;
                        const value = row.querySelector('.field-value').value;
                        const inline = row.querySelector('.field-inline').checked;
                        
                        if (name && value) {
                            html += `<div class="embed-field" style="display: ${inline ? 'inline-block' : 'block'}; width: ${inline ? '48%' : '100%'}; margin-right: ${inline ? '2%' : '0'};">
                                <div class="embed-field-name">${escapeHtml(name)}</div>
                                <div class="embed-field-value">${escapeHtml(value).replace(/\n/g, '<br>')}</div>
                            </div>`;
                        }
                    });
                    html += '</div>';
                }

                if (thumbnail) {
                    html += `<div style="margin: 8px 0;"><img src="${escapeHtml(thumbnail)}" style="max-width: 80px; max-height: 80px; border-radius: 4px;" alt="Thumbnail"></div>`;
                }

                if (image) {
                    html += `<div style="margin: 8px 0;"><img src="${escapeHtml(image)}" style="max-width: 100%; border-radius: 4px;" alt="Image"></div>`;
                }

                if (footer) {
                    html += `<div class="embed-footer">${escapeHtml(footer)}</div>`;
                }

                if (showTimestamp) {
                    const now = new Date();
                    html += `<div class="embed-timestamp">${now.toISOString()}</div>`;
                }

                // Wrap the entire embed in a div with the color border
                html = `<div style="${colorStyle} padding-left: 8px;">${html}</div>`;
            } else {
                html = '<div class="text-muted text-center"><i class="fas fa-eye-slash me-2"></i>Preview will appear here as you type</div>';
            }

            preview.innerHTML = html;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function sendEmbed() {
            const channelId = document.getElementById('targetChannel').value;
            if (!channelId) {
                alert('Please select a target channel');
                return;
            }

            const embedData = {
                title: document.getElementById('embedTitle').value,
                description: document.getElementById('embedDescription').value,
                color: document.getElementById('embedColorHex').value,
                thumbnail: document.getElementById('embedThumbnail').value,
                image: document.getElementById('embedImage').value,
                footer: document.getElementById('embedFooter').value,
                timestamp: document.getElementById('embedTimestamp').checked,
                fields: []
            };

            // Collect fields
            document.querySelectorAll('.field-row').forEach(row => {
                const name = row.querySelector('.field-name').value;
                const value = row.querySelector('.field-value').value;
                const inline = row.querySelector('.field-inline').checked;
                
                if (name && value) {
                    embedData.fields.push({ name, value, inline });
                }
            });

            // Send to server
            fetch('/api/embeds/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    channelId: channelId,
                    embed: embedData
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Embed sent successfully!');
                } else {
                    alert('Error sending embed: ' + data.error);
                }
            })
            .catch(error => {
                alert('Error sending embed: ' + error.message);
            });
        }

        function saveTemplate() {
            const templateName = prompt('Enter template name:');
            if (!templateName) return;

            const embedData = {
                title: document.getElementById('embedTitle').value,
                description: document.getElementById('embedDescription').value,
                color: document.getElementById('embedColorHex').value,
                thumbnail: document.getElementById('embedThumbnail').value,
                image: document.getElementById('embedImage').value,
                footer: document.getElementById('embedFooter').value,
                timestamp: document.getElementById('embedTimestamp').checked,
                fields: []
            };

            // Collect fields
            document.querySelectorAll('.field-row').forEach(row => {
                const name = row.querySelector('.field-name').value;
                const value = row.querySelector('.field-value').value;
                const inline = row.querySelector('.field-inline').checked;
                
                if (name && value) {
                    embedData.fields.push({ name, value, inline });
                }
            });

            // Save template
            fetch('/api/embeds/templates', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: templateName,
                    embed: embedData
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Template saved successfully!');
                    loadTemplates();
                } else {
                    alert('Error saving template: ' + data.error);
                }
            })
            .catch(error => {
                alert('Error saving template: ' + error.message);
            });
        }

        function loadTemplates() {
            fetch('/api/embeds/templates')
            .then(response => response.json())
            .then(data => {
                const container = document.getElementById('templatesList');
                if (data.templates && data.templates.length > 0) {
                    container.innerHTML = data.templates.map(template => `
                        <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded">
                            <span>${escapeHtml(template.name)}</span>
                            <div>
                                <button class="btn btn-sm btn-outline-primary me-1" onclick="loadTemplate('${template.id}')">
                                    <i class="fas fa-upload"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteTemplate('${template.id}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    `).join('');
                } else {
                    container.innerHTML = '<div class="text-muted text-center"><i class="fas fa-bookmark me-2"></i>No saved templates yet</div>';
                }
            });
        }

        function loadTemplate(templateId) {
            fetch(`/api/embeds/templates/${templateId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const embed = data.embed;
                    document.getElementById('embedTitle').value = embed.title || '';
                    document.getElementById('embedDescription').value = embed.description || '';
                    document.getElementById('embedColorHex').value = embed.color || '#5865f2';
                    document.getElementById('embedColor').value = embed.color || '#5865f2';
                    document.getElementById('embedThumbnail').value = embed.thumbnail || '';
                    document.getElementById('embedImage').value = embed.image || '';
                    document.getElementById('embedFooter').value = embed.footer || '';
                    document.getElementById('embedTimestamp').checked = embed.timestamp || false;

                    // Clear existing fields
                    document.getElementById('fieldsContainer').innerHTML = '';
                    fieldCount = 0;

                    // Add fields from template
                    if (embed.fields) {
                        embed.fields.forEach(field => {
                            addField();
                            const lastField = document.querySelector('.field-row:last-child');
                            lastField.querySelector('.field-name').value = field.name;
                            lastField.querySelector('.field-value').value = field.value;
                            lastField.querySelector('.field-inline').checked = field.inline;
                        });
                    }

                    updatePreview();
                }
            });
        }

        function deleteTemplate(templateId) {
            if (confirm('Are you sure you want to delete this template?')) {
                fetch(`/api/embeds/templates/${templateId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadTemplates();
                    } else {
                        alert('Error deleting template: ' + data.error);
                    }
                });
            }
        }

        // Load templates on page load
        document.addEventListener('DOMContentLoaded', loadTemplates);
    </script>
</body>
</html>
