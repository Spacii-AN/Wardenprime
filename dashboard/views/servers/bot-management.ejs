<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bot Management - WardenPrime Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/style.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="fas fa-shield-alt me-2"></i>WardenPrime Admin
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/dashboard">
                            <i class="fas fa-tachometer-alt me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/servers">
                            <i class="fas fa-server me-1"></i>Servers
                        </a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="fas fa-user me-1"></i><%= user.username %>#<%= user.discriminator %>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/logout">
                                <i class="fas fa-sign-out-alt me-1"></i>Logout
                            </a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1><i class="fas fa-robot me-2"></i>Bot Management</h1>
                    <div class="btn-group">
                        <a href="/servers/<%= guildId %>" class="btn btn-outline-primary">
                            <i class="fas fa-arrow-left me-1"></i>Back to Server
                        </a>
                        <button class="btn btn-success" onclick="refreshBotStatus()">
                            <i class="fas fa-sync-alt me-1"></i>Refresh Status
                        </button>
                    </div>
                </div>

                <!-- Bot Status Overview -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Bot Status</h5>
                                        <p class="card-text" id="bot-status">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-robot fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Uptime</h5>
                                        <p class="card-text" id="bot-uptime">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-clock fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Memory Usage</h5>
                                        <p class="card-text" id="bot-memory">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-memory fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Ping</h5>
                                        <p class="card-text" id="bot-ping">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-signal fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Service Status -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-cogs me-2"></i>Service Status</h5>
                            </div>
                            <div class="card-body">
                                <div class="row" id="services-container">
                                    <div class="col-md-3 mb-3">
                                        <div class="card">
                                            <div class="card-body text-center">
                                                <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
                                                <p class="mt-2 mb-0">Loading services...</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bot Controls -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-play-circle me-2"></i>Bot Controls</h5>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-success" onclick="deployCommands()">
                                        <i class="fas fa-upload me-1"></i>Deploy Commands
                                    </button>
                                    <button class="btn btn-info" onclick="updateDictionaries()">
                                        <i class="fas fa-book me-1"></i>Update Dictionaries
                                    </button>
                                    <button class="btn btn-warning" onclick="toggleService('fissure', true)">
                                        <i class="fas fa-bell me-1"></i>Toggle Fissure Service
                                    </button>
                                    <button class="btn btn-warning" onclick="toggleService('arbitration', true)">
                                        <i class="fas fa-trophy me-1"></i>Toggle Arbitration Service
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-chart-line me-2"></i>Quick Stats</h5>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-6">
                                        <h4 class="text-primary" id="total-commands">-</h4>
                                        <small class="text-muted">Commands</small>
                                    </div>
                                    <div class="col-6">
                                        <h4 class="text-success" id="active-giveaways">-</h4>
                                        <small class="text-muted">Active Giveaways</small>
                                    </div>
                                </div>
                                <hr>
                                <div class="row text-center">
                                    <div class="col-6">
                                        <h4 class="text-info" id="fissure-notifications">-</h4>
                                        <small class="text-muted">Fissure Alerts</small>
                                    </div>
                                    <div class="col-6">
                                        <h4 class="text-warning" id="lfg-sessions">-</h4>
                                        <small class="text-muted">LFG Sessions</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Real-time Logs -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-terminal me-2"></i>Real-time Logs</h5>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-secondary" onclick="filterLogs('all')">All</button>
                                    <button class="btn btn-outline-info" onclick="filterLogs('info')">Info</button>
                                    <button class="btn btn-outline-warning" onclick="filterLogs('warn')">Warnings</button>
                                    <button class="btn btn-outline-danger" onclick="filterLogs('error')">Errors</button>
                                    <button class="btn btn-outline-success" onclick="clearLogs()">Clear</button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="logs-container" style="height: 300px; overflow-y: auto; background: #1e1e1e; color: #d4d4d4; padding: 15px; border-radius: 5px; font-family: 'Courier New', monospace;">
                                    <div class="text-muted">Loading logs...</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let logInterval;
        let currentLogFilter = 'all';

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadBotStatus();
            loadServices();
            loadQuickStats();
            startLogStream();
        });

        // Load bot status
        async function loadBotStatus() {
            try {
                const response = await fetch('/api/bot/status');
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('bot-status').textContent = 'Online';
                    document.getElementById('bot-uptime').textContent = formatUptime(data.uptime || 0);
                    document.getElementById('bot-memory').textContent = `${data.memory || 0}MB`;
                    document.getElementById('bot-ping').textContent = `${data.ping || 0}ms`;
                } else {
                    document.getElementById('bot-status').textContent = 'Offline';
                    document.getElementById('bot-uptime').textContent = 'N/A';
                    document.getElementById('bot-memory').textContent = 'N/A';
                    document.getElementById('bot-ping').textContent = 'N/A';
                }
            } catch (error) {
                console.error('Error loading bot status:', error);
                document.getElementById('bot-status').textContent = 'Error';
            }
        }

        // Load services
        async function loadServices() {
            try {
                const response = await fetch('/api/bot/services/status');
                const data = await response.json();
                
                const container = document.getElementById('services-container');
                container.innerHTML = '';
                
                if (data.success && data.services) {
                    Object.entries(data.services).forEach(([name, status]) => {
                        const serviceCard = createServiceCard(name, status);
                        container.appendChild(serviceCard);
                    });
                } else {
                    container.innerHTML = '<div class="col-12"><div class="alert alert-warning">No service data available</div></div>';
                }
            } catch (error) {
                console.error('Error loading services:', error);
                document.getElementById('services-container').innerHTML = '<div class="col-12"><div class="alert alert-danger">Error loading services</div></div>';
            }
        }

        // Create service card
        function createServiceCard(name, status) {
            const col = document.createElement('div');
            col.className = 'col-md-3 mb-3';
            
            const isRunning = status.running || false;
            const statusClass = isRunning ? 'success' : 'danger';
            const statusIcon = isRunning ? 'fa-check-circle' : 'fa-times-circle';
            
            col.innerHTML = `
                <div class="card">
                    <div class="card-body text-center">
                        <i class="fas ${statusIcon} fa-2x text-${statusClass}"></i>
                        <h6 class="mt-2">${name.charAt(0).toUpperCase() + name.slice(1)}</h6>
                        <small class="text-muted">${isRunning ? 'Running' : 'Stopped'}</small>
                        <div class="mt-2">
                            <button class="btn btn-sm btn-${isRunning ? 'danger' : 'success'}" 
                                    onclick="toggleService('${name}', ${!isRunning})">
                                ${isRunning ? 'Stop' : 'Start'}
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            return col;
        }

        // Load quick stats
        async function loadQuickStats() {
            try {
                // Load commands count
                const commandsResponse = await fetch('/api/bot/commands');
                const commandsData = await commandsResponse.json();
                document.getElementById('total-commands').textContent = commandsData.commands?.length || 0;

                // Load giveaways
                const giveawaysResponse = await fetch(`/api/bot/guild/<%= guildId %>/giveaways`);
                const giveawaysData = await giveawaysResponse.json();
                const activeGiveaways = giveawaysData.giveaways?.filter(g => !g.ended).length || 0;
                document.getElementById('active-giveaways').textContent = activeGiveaways;

                // Load fissure notifications
                const fissureResponse = await fetch(`/api/bot/guild/<%= guildId %>/fissure-notifications`);
                const fissureData = await fissureResponse.json();
                document.getElementById('fissure-notifications').textContent = fissureData.notifications?.length || 0;

                // Load LFG sessions
                const lfgResponse = await fetch(`/api/bot/guild/<%= guildId %>/lfg-sessions`);
                const lfgData = await lfgResponse.json();
                document.getElementById('lfg-sessions').textContent = lfgData.sessions?.length || 0;

            } catch (error) {
                console.error('Error loading quick stats:', error);
            }
        }

        // Start log stream
        function startLogStream() {
            loadLogs();
            logInterval = setInterval(loadLogs, 2000); // Update every 2 seconds
        }

        // Load logs
        async function loadLogs() {
            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/logs?limit=50`);
                const data = await response.json();
                
                const container = document.getElementById('logs-container');
                if (data.success && data.logs) {
                    let logsHtml = '';
                    data.logs.forEach(log => {
                        if (currentLogFilter === 'all' || log.level === currentLogFilter) {
                            const timestamp = new Date(log.timestamp).toLocaleTimeString();
                            const levelClass = getLogLevelClass(log.level);
                            logsHtml += `<div class="log-entry mb-1">
                                <span class="text-muted">[${timestamp}]</span>
                                <span class="badge bg-${levelClass}">${log.level.toUpperCase()}</span>
                                <span>${log.message}</span>
                            </div>`;
                        }
                    });
                    container.innerHTML = logsHtml;
                    container.scrollTop = container.scrollHeight;
                }
            } catch (error) {
                console.error('Error loading logs:', error);
            }
        }

        // Get log level class
        function getLogLevelClass(level) {
            switch (level) {
                case 'error': return 'danger';
                case 'warn': return 'warning';
                case 'info': return 'info';
                case 'debug': return 'secondary';
                default: return 'light';
            }
        }

        // Filter logs
        function filterLogs(filter) {
            currentLogFilter = filter;
            loadLogs();
        }

        // Clear logs
        function clearLogs() {
            document.getElementById('logs-container').innerHTML = '<div class="text-muted">Logs cleared</div>';
        }

        // Refresh bot status
        function refreshBotStatus() {
            loadBotStatus();
            loadServices();
            loadQuickStats();
        }

        // Deploy commands
        async function deployCommands() {
            try {
                const response = await fetch('/api/bot/commands/deploy', { method: 'POST' });
                const data = await response.json();
                
                if (data.success) {
                    alert('Commands deployed successfully!');
                } else {
                    alert('Error deploying commands: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Error deploying commands: ' + error.message);
            }
        }

        // Update dictionaries
        async function updateDictionaries() {
            try {
                const response = await fetch('/api/bot/dictionary/update', { method: 'POST' });
                const data = await response.json();
                
                if (data.success) {
                    alert('Dictionaries updated successfully!');
                } else {
                    alert('Error updating dictionaries: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Error updating dictionaries: ' + error.message);
            }
        }

        // Toggle service
        async function toggleService(serviceName, enabled) {
            try {
                const response = await fetch('/api/bot/services/toggle', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ service: serviceName, enabled })
                });
                const data = await response.json();
                
                if (data.success) {
                    alert(`Service ${serviceName} ${enabled ? 'started' : 'stopped'} successfully!`);
                    loadServices();
                } else {
                    alert(`Error toggling service: ${data.error || 'Unknown error'}`);
                }
            } catch (error) {
                alert(`Error toggling service: ${error.message}`);
            }
        }

        // Format uptime
        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            
            if (days > 0) return `${days}d ${hours}h ${minutes}m`;
            if (hours > 0) return `${hours}h ${minutes}m`;
            return `${minutes}m`;
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (logInterval) {
                clearInterval(logInterval);
            }
        });
    </script>
</body>
</html>
