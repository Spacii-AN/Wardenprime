<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Embed Settings - Warden Prime Dashboard</title>
    <link rel="stylesheet" href="/style.css">
    <style>
      .embed-preview {
        background: #2f3136;
        border-radius: 8px;
        padding: 16px;
        margin: 16px 0;
        border-left: 4px solid #5865f2;
        max-width: 500px;
      }
      .embed-preview .embed-title {
        color: #ffffff;
        font-weight: bold;
        margin-bottom: 8px;
      }
      .embed-preview .embed-description {
        color: #dcddde;
        margin-bottom: 8px;
      }
      .embed-preview .embed-footer {
        color: #72767d;
        font-size: 12px;
        margin-top: 8px;
      }
      .embed-preview .embed-author {
        color: #00b0f4;
        font-size: 14px;
        margin-bottom: 8px;
      }
      .color-preview {
        width: 24px;
        height: 24px;
        border-radius: 4px;
        display: inline-block;
        margin-left: 8px;
        border: 1px solid #ddd;
      }
      .settings-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 24px;
        margin: 24px 0;
      }
      .settings-section {
        background: #2d2d2d;
        border: 1px solid #404040;
        border-radius: 8px;
        padding: 20px;
      }
      .settings-section h3 {
        margin-top: 0;
        color: #2c3e50;
      }
      .form-group {
        margin-bottom: 16px;
      }
      .form-group label {
        display: block;
        margin-bottom: 4px;
        font-weight: 500;
        color: #2c3e50;
      }
      .form-group input, .form-group select {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
      }
      .form-group input[type="color"] {
        width: 60px;
        height: 40px;
        padding: 0;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      .form-group input[type="checkbox"] {
        width: auto;
        margin-right: 8px;
      }
      .btn-group {
        display: flex;
        gap: 8px;
        margin-top: 16px;
      }
      .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        text-decoration: none;
        display: inline-block;
        text-align: center;
      }
      .btn-primary {
        background: #5865f2;
        color: white;
      }
      .btn-secondary {
        background: #6c757d;
        color: white;
      }
      .btn-success {
        background: #28a745;
        color: white;
      }
      .btn:hover {
        opacity: 0.9;
      }
      .status-message {
        padding: 12px;
        border-radius: 4px;
        margin: 16px 0;
        display: none;
      }
      .status-success {
        background: #1e3a1e;
        color: #4ade80;
        border: 1px solid #28a745;
      }
      .status-error {
        background: #3a1e1e;
        color: #f87171;
        border: 1px solid #dc3545;
      }
      @media (max-width: 768px) {
        .settings-grid {
          grid-template-columns: 1fr;
        }
      }
    </style>
  </head>
  <body>
    <header class="row">
      <strong>Warden Prime Dashboard</strong>
      <div class="spacer"></div>
      <% if (user) { %>
        <span class="muted">Logged in as <%= user.username %>#<%= user.discriminator %></span>
        <a class="btn" href="/logout">Logout</a>
      <% } else { %>
        <a class="btn" href="/login">Login with Discord</a>
      <% } %>
    </header>

    <main>
      <div class="row">
        <h1>üé® Embed Settings</h1>
        <p>Customize the appearance of bot embeds for this server.</p>
      </div>

      <div class="status-message" id="statusMessage"></div>

      <div class="settings-grid">
        <!-- Color Settings -->
        <div class="settings-section">
          <h3>üé® Colors</h3>
          <p>Customize the colors used in different types of embeds.</p>
          
          <div class="form-group">
            <label for="primaryColor">Primary Color</label>
            <div style="display: flex; align-items: center;">
              <input type="color" id="primaryColor" value="#5865F2">
              <span class="color-preview" id="primaryPreview" style="background: #5865F2;"></span>
            </div>
          </div>

          <div class="form-group">
            <label for="successColor">Success Color</label>
            <div style="display: flex; align-items: center;">
              <input type="color" id="successColor" value="#57F287">
              <span class="color-preview" id="successPreview" style="background: #57F287;"></span>
            </div>
          </div>

          <div class="form-group">
            <label for="errorColor">Error Color</label>
            <div style="display: flex; align-items: center;">
              <input type="color" id="errorColor" value="#ED4245">
              <span class="color-preview" id="errorPreview" style="background: #ED4245;"></span>
            </div>
          </div>

          <div class="form-group">
            <label for="warningColor">Warning Color</label>
            <div style="display: flex; align-items: center;">
              <input type="color" id="warningColor" value="#FEE75C">
              <span class="color-preview" id="warningPreview" style="background: #FEE75C;"></span>
            </div>
          </div>

          <div class="form-group">
            <label for="infoColor">Info Color</label>
            <div style="display: flex; align-items: center;">
              <input type="color" id="infoColor" value="#5865F2">
              <span class="color-preview" id="infoPreview" style="background: #5865F2;"></span>
            </div>
          </div>
        </div>

        <!-- Appearance Settings -->
        <div class="settings-section">
          <h3>‚öôÔ∏è Appearance</h3>
          <p>Configure default appearance settings for embeds.</p>
          
          <div class="form-group">
            <label for="defaultFooter">Default Footer</label>
            <input type="text" id="defaultFooter" placeholder="Powered by WardenPrime" maxlength="2048">
          </div>

          <div class="form-group">
            <label for="authorName">Author Name</label>
            <input type="text" id="authorName" placeholder="WardenPrime" maxlength="256">
          </div>

          <div class="form-group">
            <label for="authorIcon">Author Icon URL</label>
            <input type="url" id="authorIcon" placeholder="https://example.com/icon.png">
          </div>

          <div class="form-group">
            <label for="authorUrl">Author URL (optional)</label>
            <input type="url" id="authorUrl" placeholder="https://example.com">
          </div>

          <div class="form-group">
            <label>
              <input type="checkbox" id="showTimestamp" checked>
              Show timestamp by default
            </label>
          </div>

          <div class="form-group">
            <label>
              <input type="checkbox" id="showAuthor" checked>
              Show author by default
            </label>
          </div>
        </div>
      </div>

      <!-- Preview Section -->
      <div class="settings-section">
        <h3>üëÅÔ∏è Preview</h3>
        <p>See how your settings will look in actual embeds.</p>
        
        <div class="embed-preview" id="embedPreview">
          <div class="embed-author">üë§ WardenPrime</div>
          <div class="embed-title">Sample Embed</div>
          <div class="embed-description">This is how your embeds will look with the current settings.</div>
          <div class="embed-footer">Powered by WardenPrime ‚Ä¢ Today at 12:00 PM</div>
        </div>
      </div>

      <div class="btn-group">
        <button class="btn btn-primary" onclick="saveSettings()">üíæ Save Settings</button>
        <button class="btn btn-secondary" onclick="resetToDefaults()">üîÑ Reset to Defaults</button>
        <button class="btn btn-success" onclick="testEmbed()">üß™ Test Embed</button>
      </div>
    </main>

    <script>
      // Load current settings
      async function loadSettings() {
        try {
          const response = await fetch('/api/embeds/settings');
          if (response.ok) {
            const settings = await response.json();
            
            // Set form values
            document.getElementById('primaryColor').value = settings.primary_color || '#5865F2';
            document.getElementById('successColor').value = settings.success_color || '#57F287';
            document.getElementById('errorColor').value = settings.error_color || '#ED4245';
            document.getElementById('warningColor').value = settings.warning_color || '#FEE75C';
            document.getElementById('infoColor').value = settings.info_color || '#5865F2';
            
            document.getElementById('defaultFooter').value = settings.default_footer || '';
            document.getElementById('authorName').value = settings.default_author_name || '';
            document.getElementById('authorIcon').value = settings.default_author_icon || '';
            document.getElementById('authorUrl').value = settings.default_author_url || '';
            document.getElementById('showTimestamp').checked = settings.show_timestamp === 'true';
            document.getElementById('showAuthor').checked = settings.show_author === 'true';
            
            updatePreview();
          }
        } catch (error) {
          console.error('Error loading settings:', error);
          showStatus('Error loading settings', 'error');
        }
      }

      // Update color previews
      function updateColorPreviews() {
        const colors = ['primary', 'success', 'error', 'warning', 'info'];
        colors.forEach(color => {
          const input = document.getElementById(color + 'Color');
          const preview = document.getElementById(color + 'Preview');
          if (input && preview) {
            preview.style.background = input.value;
          }
        });
      }

      // Update embed preview
      function updatePreview() {
        const preview = document.getElementById('embedPreview');
        const primaryColor = document.getElementById('primaryColor').value;
        const footer = document.getElementById('defaultFooter').value;
        const authorName = document.getElementById('authorName').value;
        const showAuthor = document.getElementById('showAuthor').checked;
        const showTimestamp = document.getElementById('showTimestamp').checked;
        
        // Update border color
        preview.style.borderLeftColor = primaryColor;
        
        // Update author
        const authorEl = preview.querySelector('.embed-author');
        if (showAuthor && authorName) {
          authorEl.textContent = 'üë§ ' + authorName;
          authorEl.style.display = 'block';
        } else {
          authorEl.style.display = 'none';
        }
        
        // Update footer
        const footerEl = preview.querySelector('.embed-footer');
        let footerText = footer || 'Powered by WardenPrime';
        if (showTimestamp) {
          footerText += ' ‚Ä¢ Today at 12:00 PM';
        }
        footerEl.textContent = footerText;
      }

      // Save settings
      async function saveSettings() {
        try {
          const settings = {
            primary_color: document.getElementById('primaryColor').value,
            success_color: document.getElementById('successColor').value,
            error_color: document.getElementById('errorColor').value,
            warning_color: document.getElementById('warningColor').value,
            info_color: document.getElementById('infoColor').value,
            default_footer: document.getElementById('defaultFooter').value,
            default_author_name: document.getElementById('authorName').value,
            default_author_icon: document.getElementById('authorIcon').value,
            default_author_url: document.getElementById('authorUrl').value,
            show_timestamp: document.getElementById('showTimestamp').checked.toString(),
            show_author: document.getElementById('showAuthor').checked.toString()
          };

          const response = await fetch('/api/embeds/settings', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(settings)
          });

          if (response.ok) {
            showStatus('Settings saved successfully!', 'success');
          } else {
            throw new Error('Failed to save settings');
          }
        } catch (error) {
          console.error('Error saving settings:', error);
          showStatus('Error saving settings', 'error');
        }
      }

      // Reset to defaults
      async function resetToDefaults() {
        if (confirm('Are you sure you want to reset all settings to defaults?')) {
          try {
            const response = await fetch('/api/embeds/settings/reset', {
              method: 'POST'
            });

            if (response.ok) {
              showStatus('Settings reset to defaults', 'success');
              loadSettings();
            } else {
              throw new Error('Failed to reset settings');
            }
          } catch (error) {
            console.error('Error resetting settings:', error);
            showStatus('Error resetting settings', 'error');
          }
        }
      }

      // Test embed
      async function testEmbed() {
        try {
          const response = await fetch('/api/embeds/test', {
            method: 'POST'
          });

          if (response.ok) {
            showStatus('Test embed sent! Check your Discord server.', 'success');
          } else {
            throw new Error('Failed to send test embed');
          }
        } catch (error) {
          console.error('Error sending test embed:', error);
          showStatus('Error sending test embed', 'error');
        }
      }

      // Show status message
      function showStatus(message, type) {
        const statusEl = document.getElementById('statusMessage');
        statusEl.textContent = message;
        statusEl.className = `status-message status-${type}`;
        statusEl.style.display = 'block';
        
        setTimeout(() => {
          statusEl.style.display = 'none';
        }, 5000);
      }

      // Event listeners
      document.addEventListener('DOMContentLoaded', function() {
        loadSettings();
        
        // Add event listeners for real-time preview updates
        const inputs = document.querySelectorAll('input, select');
        inputs.forEach(input => {
          input.addEventListener('input', function() {
            updateColorPreviews();
            updatePreview();
          });
          input.addEventListener('change', function() {
            updateColorPreviews();
            updatePreview();
          });
        });
      });
    </script>
  </body>
</html>
