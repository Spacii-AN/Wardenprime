<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Giveaway Management - WardenPrime Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="fas fa-shield-alt me-2"></i>WardenPrime Admin
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/dashboard">
                            <i class="fas fa-tachometer-alt me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/servers">
                            <i class="fas fa-server me-1"></i>Servers
                        </a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="fas fa-user me-1"></i><%= user.username %>#<%= user.discriminator %>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/logout">
                                <i class="fas fa-sign-out-alt me-1"></i>Logout
                            </a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1><i class="fas fa-gift me-2"></i>Giveaway Management</h1>
                    <div class="btn-group">
                        <a href="/servers/<%= guildId %>" class="btn btn-outline-primary">
                            <i class="fas fa-arrow-left me-1"></i>Back to Server
                        </a>
                        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createGiveawayModal">
                            <i class="fas fa-plus me-1"></i>Create Giveaway
                        </button>
                    </div>
                </div>

                <!-- Giveaway Stats -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Active Giveaways</h5>
                                        <p class="card-text" id="active-count">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-gift fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Total Entries</h5>
                                        <p class="card-text" id="total-entries">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-users fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Completed</h5>
                                        <p class="card-text" id="completed-count">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-check-circle fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Total Winners</h5>
                                        <p class="card-text" id="total-winners">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-trophy fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Giveaways List -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-list me-2"></i>Giveaways</h5>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" onclick="filterGiveaways('all')">All</button>
                                    <button class="btn btn-outline-success" onclick="filterGiveaways('active')">Active</button>
                                    <button class="btn btn-outline-secondary" onclick="filterGiveaways('ended')">Ended</button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="giveaways-container">
                                    <div class="text-center">
                                        <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
                                        <p class="mt-2">Loading giveaways...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Giveaway Modal -->
    <div class="modal fade" id="createGiveawayModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-gift me-2"></i>Create New Giveaway</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createGiveawayForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="prize" class="form-label">Prize *</label>
                                    <input type="text" class="form-control" id="prize" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="winners" class="form-label">Number of Winners</label>
                                    <input type="number" class="form-control" id="winners" value="1" min="1">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" rows="3"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="duration" class="form-label">Duration *</label>
                                    <input type="text" class="form-control" id="duration" placeholder="e.g., 1h, 30m, 2d" required>
                                    <div class="form-text">Examples: 1h, 30m, 2d, 1w</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="requirement" class="form-label">Requirement</label>
                                    <input type="text" class="form-control" id="requirement" placeholder="e.g., React to message">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="channel" class="form-label">Channel *</label>
                                    <select class="form-select" id="channel" required>
                                        <option value="">Select a channel...</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="host" class="form-label">Host (Optional)</label>
                                    <select class="form-select" id="host">
                                        <option value="">No host</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="createGiveaway()">
                        <i class="fas fa-plus me-1"></i>Create Giveaway
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Giveaway Details Modal -->
    <div class="modal fade" id="giveawayDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-gift me-2"></i>Giveaway Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="giveaway-details-content">
                    <!-- Content will be loaded here -->
                </div>
                <div class="modal-footer" id="giveaway-details-actions">
                    <!-- Actions will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentFilter = 'all';
        let giveaways = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadGiveaways();
            loadChannels();
            loadMembers();
        });

        // Load giveaways
        async function loadGiveaways() {
            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/giveaways`);
                const data = await response.json();
                
                if (data.success) {
                    giveaways = data.giveaways || [];
                    updateStats();
                    renderGiveaways();
                } else {
                    showError('Error loading giveaways: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                showError('Error loading giveaways: ' + error.message);
            }
        }

        // Update stats
        function updateStats() {
            const active = giveaways.filter(g => !g.ended).length;
            const completed = giveaways.filter(g => g.ended).length;
            const totalEntries = giveaways.reduce((sum, g) => sum + (g.entries || 0), 0);
            const totalWinners = giveaways.reduce((sum, g) => sum + (g.winners_count || 0), 0);

            document.getElementById('active-count').textContent = active;
            document.getElementById('completed-count').textContent = completed;
            document.getElementById('total-entries').textContent = totalEntries;
            document.getElementById('total-winners').textContent = totalWinners;
        }

        // Render giveaways
        function renderGiveaways() {
            const container = document.getElementById('giveaways-container');
            let filteredGiveaways = giveaways;

            if (currentFilter === 'active') {
                filteredGiveaways = giveaways.filter(g => !g.ended);
            } else if (currentFilter === 'ended') {
                filteredGiveaways = giveaways.filter(g => g.ended);
            }

            if (filteredGiveaways.length === 0) {
                container.innerHTML = '<div class="text-center text-muted"><i class="fas fa-gift fa-3x mb-3"></i><p>No giveaways found</p></div>';
                return;
            }

            let html = '';
            filteredGiveaways.forEach(giveaway => {
                const statusClass = giveaway.ended ? 'secondary' : 'success';
                const statusText = giveaway.ended ? 'Ended' : 'Active';
                const timeLeft = giveaway.ended ? 'Completed' : formatTimeLeft(new Date(giveaway.ends_at));
                
                html += `
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <h6 class="card-title">${giveaway.prize}</h6>
                                    <p class="card-text text-muted">${giveaway.description || 'No description'}</p>
                                    <small class="text-muted">
                                        <i class="fas fa-users me-1"></i>${giveaway.entries || 0} entries
                                        <span class="ms-3"><i class="fas fa-trophy me-1"></i>${giveaway.winners_count} winner(s)</span>
                                    </small>
                                </div>
                                <div class="col-md-3">
                                    <span class="badge bg-${statusClass}">${statusText}</span>
                                    <div class="mt-1">
                                        <small class="text-muted">${timeLeft}</small>
                                    </div>
                                </div>
                                <div class="col-md-3 text-end">
                                    <button class="btn btn-sm btn-outline-primary me-1" onclick="viewGiveaway('${giveaway.id}')">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    ${!giveaway.ended ? `
                                        <button class="btn btn-sm btn-warning me-1" onclick="endGiveaway('${giveaway.id}')">
                                            <i class="fas fa-stop"></i>
                                        </button>
                                    ` : ''}
                                    <button class="btn btn-sm btn-danger" onclick="deleteGiveaway('${giveaway.id}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
        }

        // Filter giveaways
        function filterGiveaways(filter) {
            currentFilter = filter;
            renderGiveaways();
        }

        // Load channels
        async function loadChannels() {
            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/channels`);
                const data = await response.json();
                
                if (data.success && data.channels) {
                    const select = document.getElementById('channel');
                    data.channels.forEach(channel => {
                        if (channel.type === 0) { // Text channels only
                            const option = document.createElement('option');
                            option.value = channel.id;
                            option.textContent = `#${channel.name}`;
                            select.appendChild(option);
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading channels:', error);
            }
        }

        // Load members
        async function loadMembers() {
            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/members`);
                const data = await response.json();
                
                if (data.success && data.members) {
                    const select = document.getElementById('host');
                    data.members.forEach(member => {
                        const option = document.createElement('option');
                        option.value = member.id;
                        option.textContent = member.username;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading members:', error);
            }
        }

        // Create giveaway
        async function createGiveaway() {
            const form = document.getElementById('createGiveawayForm');
            const formData = new FormData(form);
            
            const giveawayData = {
                prize: document.getElementById('prize').value,
                description: document.getElementById('description').value,
                winners_count: parseInt(document.getElementById('winners').value),
                duration: document.getElementById('duration').value,
                requirement: document.getElementById('requirement').value,
                channel_id: document.getElementById('channel').value,
                host_id: document.getElementById('host').value || null
            };

            if (!giveawayData.prize || !giveawayData.duration || !giveawayData.channel_id) {
                alert('Please fill in all required fields');
                return;
            }

            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/giveaways`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(giveawayData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Giveaway created successfully!');
                    bootstrap.Modal.getInstance(document.getElementById('createGiveawayModal')).hide();
                    form.reset();
                    loadGiveaways();
                } else {
                    alert('Error creating giveaway: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Error creating giveaway: ' + error.message);
            }
        }

        // View giveaway details
        async function viewGiveaway(giveawayId) {
            const giveaway = giveaways.find(g => g.id === giveawayId);
            if (!giveaway) return;

            const content = document.getElementById('giveaway-details-content');
            const actions = document.getElementById('giveaway-details-actions');
            
            content.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h6>Prize</h6>
                        <p>${giveaway.prize}</p>
                        
                        <h6>Description</h6>
                        <p>${giveaway.description || 'No description'}</p>
                        
                        <h6>Winners</h6>
                        <p>${giveaway.winners_count}</p>
                    </div>
                    <div class="col-md-6">
                        <h6>Status</h6>
                        <p><span class="badge bg-${giveaway.ended ? 'secondary' : 'success'}">${giveaway.ended ? 'Ended' : 'Active'}</span></p>
                        
                        <h6>Entries</h6>
                        <p>${giveaway.entries || 0}</p>
                        
                        <h6>Ends At</h6>
                        <p>${new Date(giveaway.ends_at).toLocaleString()}</p>
                    </div>
                </div>
            `;

            actions.innerHTML = `
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                ${!giveaway.ended ? `
                    <button type="button" class="btn btn-warning" onclick="endGiveaway('${giveaway.id}')">
                        <i class="fas fa-stop me-1"></i>End Giveaway
                    </button>
                ` : `
                    <button type="button" class="btn btn-info" onclick="rerollGiveaway('${giveaway.id}')">
                        <i class="fas fa-redo me-1"></i>Reroll
                    </button>
                `}
            `;

            new bootstrap.Modal(document.getElementById('giveawayDetailsModal')).show();
        }

        // End giveaway
        async function endGiveaway(giveawayId) {
            if (!confirm('Are you sure you want to end this giveaway?')) return;

            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/giveaways/${giveawayId}/end`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Giveaway ended successfully!');
                    loadGiveaways();
                } else {
                    alert('Error ending giveaway: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Error ending giveaway: ' + error.message);
            }
        }

        // Reroll giveaway
        async function rerollGiveaway(giveawayId) {
            if (!confirm('Are you sure you want to reroll this giveaway?')) return;

            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/giveaways/${giveawayId}/reroll`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Giveaway rerolled successfully!');
                    loadGiveaways();
                } else {
                    alert('Error rerolling giveaway: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Error rerolling giveaway: ' + error.message);
            }
        }

        // Delete giveaway
        async function deleteGiveaway(giveawayId) {
            if (!confirm('Are you sure you want to delete this giveaway? This action cannot be undone.')) return;

            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/giveaways/${giveawayId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Giveaway deleted successfully!');
                    loadGiveaways();
                } else {
                    alert('Error deleting giveaway: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Error deleting giveaway: ' + error.message);
            }
        }

        // Format time left
        function formatTimeLeft(endTime) {
            const now = new Date();
            const end = new Date(endTime);
            const diff = end - now;
            
            if (diff <= 0) return 'Ended';
            
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
            
            if (days > 0) return `${days}d ${hours}h ${minutes}m`;
            if (hours > 0) return `${hours}h ${minutes}m`;
            return `${minutes}m`;
        }

        // Show error
        function showError(message) {
            const container = document.getElementById('giveaways-container');
            container.innerHTML = `<div class="alert alert-danger">${message}</div>`;
        }
    </script>
</body>
</html>
