<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fissure Management - WardenPrime Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="fas fa-shield-alt me-2"></i>WardenPrime Admin
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/dashboard">
                            <i class="fas fa-tachometer-alt me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/servers">
                            <i class="fas fa-server me-1"></i>Servers
                        </a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="fas fa-user me-1"></i><%= user.username %>#<%= user.discriminator %>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/logout">
                                <i class="fas fa-sign-out-alt me-1"></i>Logout
                            </a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1><i class="fas fa-bell me-2"></i>Fissure Notification Management</h1>
                    <div class="btn-group">
                        <a href="/servers/<%= guildId %>" class="btn btn-outline-primary">
                            <i class="fas fa-arrow-left me-1"></i>Back to Server
                        </a>
                        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createNotificationModal">
                            <i class="fas fa-plus me-1"></i>Create Notification
                        </button>
                    </div>
                </div>

                <!-- Current Fissures -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-radiation me-2"></i>Current Active Fissures</h5>
                                <button class="btn btn-sm btn-outline-primary" onclick="refreshFissures()">
                                    <i class="fas fa-sync-alt me-1"></i>Refresh
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="current-fissures">
                                    <div class="text-center">
                                        <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
                                        <p class="mt-2">Loading current fissures...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Notification Stats -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Active Notifications</h5>
                                        <p class="card-text" id="active-notifications">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-bell fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Steel Path Alerts</h5>
                                        <p class="card-text" id="steel-path-alerts">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-shield-alt fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Mission Types</h5>
                                        <p class="card-text" id="mission-types">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-tasks fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Node-Specific</h5>
                                        <p class="card-text" id="node-specific">Loading...</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-map-marker-alt fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Notifications List -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-list me-2"></i>Configured Notifications</h5>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" onclick="filterNotifications('all')">All</button>
                                    <button class="btn btn-outline-success" onclick="filterNotifications('steel')">Steel Path</button>
                                    <button class="btn btn-outline-info" onclick="filterNotifications('normal')">Normal</button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="notifications-container">
                                    <div class="text-center">
                                        <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
                                        <p class="mt-2">Loading notifications...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Notification Modal -->
    <div class="modal fade" id="createNotificationModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-bell me-2"></i>Create Fissure Notification</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createNotificationForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="mission-type" class="form-label">Mission Type *</label>
                                    <select class="form-select" id="mission-type" required>
                                        <option value="">Select mission type...</option>
                                        <option value="Survival">Survival</option>
                                        <option value="Defense">Defense</option>
                                        <option value="Exterminate">Exterminate</option>
                                        <option value="Capture">Capture</option>
                                        <option value="Rescue">Rescue</option>
                                        <option value="Sabotage">Sabotage</option>
                                        <option value="Mobile Defense">Mobile Defense</option>
                                        <option value="Spy">Spy</option>
                                        <option value="Interception">Interception</option>
                                        <option value="Excavation">Excavation</option>
                                        <option value="Disruption">Disruption</option>
                                        <option value="Alchemy">Alchemy</option>
                                        <option value="Void Cascade">Void Cascade</option>
                                        <option value="Void Flood">Void Flood</option>
                                        <option value="Void Armageddon">Void Armageddon</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="node" class="form-label">Specific Node (Optional)</label>
                                    <input type="text" class="form-control" id="node" placeholder="e.g., Hydron, Sedna">
                                    <div class="form-text">Leave empty for all nodes of this mission type</div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="channel" class="form-label">Channel *</label>
                                    <select class="form-select" id="channel" required>
                                        <option value="">Select a channel...</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="role" class="form-label">Role to Ping (Optional)</label>
                                    <select class="form-select" id="role">
                                        <option value="">No role ping</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="steel-path">
                                <label class="form-check-label" for="steel-path">
                                    Steel Path Only
                                </label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="createNotification()">
                        <i class="fas fa-plus me-1"></i>Create Notification
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentFilter = 'all';
        let notifications = [];
        let currentFissures = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadNotifications();
            loadCurrentFissures();
            loadChannels();
            loadRoles();
        });

        // Load notifications
        async function loadNotifications() {
            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/fissure-notifications`);
                const data = await response.json();
                
                if (data.success) {
                    notifications = data.notifications || [];
                    updateStats();
                    renderNotifications();
                } else {
                    showError('Error loading notifications: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                showError('Error loading notifications: ' + error.message);
            }
        }

        // Load current fissures
        async function loadCurrentFissures() {
            try {
                const response = await fetch('/api/bot/fissures/current');
                const data = await response.json();
                
                if (data.success) {
                    currentFissures = data.fissures || [];
                    renderCurrentFissures();
                } else {
                    document.getElementById('current-fissures').innerHTML = '<div class="alert alert-warning">No current fissures available</div>';
                }
            } catch (error) {
                document.getElementById('current-fissures').innerHTML = '<div class="alert alert-danger">Error loading current fissures</div>';
            }
        }

        // Update stats
        function updateStats() {
            const active = notifications.length;
            const steelPath = notifications.filter(n => n.steel_path).length;
            const missionTypes = new Set(notifications.map(n => n.mission_type)).size;
            const nodeSpecific = notifications.filter(n => n.node_name).length;

            document.getElementById('active-notifications').textContent = active;
            document.getElementById('steel-path-alerts').textContent = steelPath;
            document.getElementById('mission-types').textContent = missionTypes;
            document.getElementById('node-specific').textContent = nodeSpecific;
        }

        // Render current fissures
        function renderCurrentFissures() {
            const container = document.getElementById('current-fissures');
            
            if (currentFissures.length === 0) {
                container.innerHTML = '<div class="text-center text-muted"><i class="fas fa-radiation fa-3x mb-3"></i><p>No active fissures</p></div>';
                return;
            }

            let html = '';
            currentFissures.forEach(fissure => {
                const timeLeft = formatTimeLeft(new Date(fissure.expiry));
                const tierClass = getTierClass(fissure.tier);
                
                html += `
                    <div class="card mb-2">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-4">
                                    <h6 class="mb-1">${fissure.missionType}</h6>
                                    <small class="text-muted">${fissure.node}</small>
                                </div>
                                <div class="col-md-2">
                                    <span class="badge bg-${tierClass}">${fissure.tier}</span>
                                </div>
                                <div class="col-md-2">
                                    <small class="text-muted">${fissure.faction}</small>
                                </div>
                                <div class="col-md-2">
                                    <small class="text-muted">Level ${fissure.enemyLevel}</small>
                                </div>
                                <div class="col-md-2 text-end">
                                    <small class="text-muted">${timeLeft}</small>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
        }

        // Render notifications
        function renderNotifications() {
            const container = document.getElementById('notifications-container');
            let filteredNotifications = notifications;

            if (currentFilter === 'steel') {
                filteredNotifications = notifications.filter(n => n.steel_path);
            } else if (currentFilter === 'normal') {
                filteredNotifications = notifications.filter(n => !n.steel_path);
            }

            if (filteredNotifications.length === 0) {
                container.innerHTML = '<div class="text-center text-muted"><i class="fas fa-bell fa-3x mb-3"></i><p>No notifications found</p></div>';
                return;
            }

            let html = '';
            filteredNotifications.forEach(notification => {
                const steelPathBadge = notification.steel_path ? '<span class="badge bg-warning">Steel Path</span>' : '';
                const nodeInfo = notification.node_name ? `<small class="text-muted">Node: ${notification.node_name}</small>` : '';
                
                html += `
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-4">
                                    <h6 class="card-title">${notification.mission_type}</h6>
                                    ${nodeInfo}
                                </div>
                                <div class="col-md-2">
                                    ${steelPathBadge}
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">
                                        <i class="fas fa-hashtag me-1"></i>Channel: <span id="channel-${notification.id}">Loading...</span>
                                    </small>
                                </div>
                                <div class="col-md-2">
                                    <small class="text-muted">
                                        <i class="fas fa-users me-1"></i>Role: ${notification.role_id ? `<span id="role-${notification.id}">Loading...</span>` : 'None'}
                                    </small>
                                </div>
                                <div class="col-md-1 text-end">
                                    <button class="btn btn-sm btn-danger" onclick="deleteNotification('${notification.id}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
            
            // Load channel and role names
            loadChannelAndRoleNames();
        }

        // Load channel and role names
        async function loadChannelAndRoleNames() {
            try {
                const [channelsResponse, rolesResponse] = await Promise.all([
                    fetch(`/api/bot/guild/<%= guildId %>/channels`),
                    fetch(`/api/bot/guild/<%= guildId %>/roles`)
                ]);
                
                const channelsData = await channelsResponse.json();
                const rolesData = await rolesResponse.json();
                
                notifications.forEach(notification => {
                    if (channelsData.success && channelsData.channels) {
                        const channel = channelsData.channels.find(c => c.id === notification.channel_id);
                        if (channel) {
                            const element = document.getElementById(`channel-${notification.id}`);
                            if (element) element.textContent = `#${channel.name}`;
                        }
                    }
                    
                    if (rolesData.success && rolesData.roles && notification.role_id) {
                        const role = rolesData.roles.find(r => r.id === notification.role_id);
                        if (role) {
                            const element = document.getElementById(`role-${notification.id}`);
                            if (element) element.textContent = role.name;
                        }
                    }
                });
            } catch (error) {
                console.error('Error loading channel and role names:', error);
            }
        }

        // Load channels
        async function loadChannels() {
            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/channels`);
                const data = await response.json();
                
                if (data.success && data.channels) {
                    const select = document.getElementById('channel');
                    data.channels.forEach(channel => {
                        if (channel.type === 0) { // Text channels only
                            const option = document.createElement('option');
                            option.value = channel.id;
                            option.textContent = `#${channel.name}`;
                            select.appendChild(option);
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading channels:', error);
            }
        }

        // Load roles
        async function loadRoles() {
            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/roles`);
                const data = await response.json();
                
                if (data.success && data.roles) {
                    const select = document.getElementById('role');
                    data.roles.forEach(role => {
                        if (role.name !== '@everyone') {
                            const option = document.createElement('option');
                            option.value = role.id;
                            option.textContent = role.name;
                            select.appendChild(option);
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading roles:', error);
            }
        }

        // Filter notifications
        function filterNotifications(filter) {
            currentFilter = filter;
            renderNotifications();
        }

        // Create notification
        async function createNotification() {
            const form = document.getElementById('createNotificationForm');
            
            const notificationData = {
                mission_type: document.getElementById('mission-type').value,
                node_name: document.getElementById('node').value || null,
                channel_id: document.getElementById('channel').value,
                role_id: document.getElementById('role').value || null,
                steel_path: document.getElementById('steel-path').checked
            };

            if (!notificationData.mission_type || !notificationData.channel_id) {
                alert('Please fill in all required fields');
                return;
            }

            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/fissure-notifications`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(notificationData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Notification created successfully!');
                    bootstrap.Modal.getInstance(document.getElementById('createNotificationModal')).hide();
                    form.reset();
                    loadNotifications();
                } else {
                    alert('Error creating notification: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Error creating notification: ' + error.message);
            }
        }

        // Delete notification
        async function deleteNotification(notificationId) {
            if (!confirm('Are you sure you want to delete this notification?')) return;

            try {
                const response = await fetch(`/api/bot/guild/<%= guildId %>/fissure-notifications/${notificationId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Notification deleted successfully!');
                    loadNotifications();
                } else {
                    alert('Error deleting notification: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Error deleting notification: ' + error.message);
            }
        }

        // Refresh fissures
        function refreshFissures() {
            loadCurrentFissures();
        }

        // Format time left
        function formatTimeLeft(endTime) {
            const now = new Date();
            const end = new Date(endTime);
            const diff = end - now;
            
            if (diff <= 0) return 'Ended';
            
            const hours = Math.floor(diff / (1000 * 60 * 60));
            const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
            
            if (hours > 0) return `${hours}h ${minutes}m`;
            return `${minutes}m`;
        }

        // Get tier class
        function getTierClass(tier) {
            switch (tier) {
                case 'Lith': return 'success';
                case 'Meso': return 'info';
                case 'Neo': return 'warning';
                case 'Axi': return 'danger';
                case 'Requiem': return 'dark';
                case 'Omnia': return 'primary';
                default: return 'secondary';
            }
        }

        // Show error
        function showError(message) {
            const container = document.getElementById('notifications-container');
            container.innerHTML = `<div class="alert alert-danger">${message}</div>`;
        }
    </script>
</body>
</html>
