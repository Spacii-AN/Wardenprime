#!/bin/bash

# WardenPrime Shared Development Setup Script
# This script helps set up the development environment when multiple developers
# want to use the same Discord server for testing

set -e

echo "🤝 WardenPrime Shared Development Setup"
echo "========================================"
echo ""
echo "This setup is for when multiple developers want to use the same Discord server."
echo ""

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    echo "❌ Please run this script from the WardenPrime root directory"
    exit 1
fi

# Get developer information
echo "👤 Developer Information"
echo "========================"
read -p "Enter your name: " DEV_NAME
read -p "Enter your Discord user ID (bot owner): " BOT_OWNER_ID

echo ""
echo "🤖 Shared Bot Configuration"
echo "==========================="
echo "You'll be using a shared bot token and Discord server."
echo "Make sure to coordinate with other developers!"
echo ""
read -p "Enter the shared bot token: " SHARED_BOT_TOKEN
read -p "Enter the shared client ID: " SHARED_CLIENT_ID
read -p "Enter the shared guild ID: " SHARED_GUILD_ID

# Generate unique passwords for this developer
DEV_PASSWORD=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-16)
DEV_SESSION_SECRET=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)

echo ""
echo "📝 Creating shared development environment file..."

# Create .env file for shared development
cat > .env << EOF
# ===========================================
# WardenPrime Shared Development Environment
# ===========================================
# Generated by setup-dev-shared.sh on $(date)
# 
# IMPORTANT: This setup uses a shared Discord server and bot token.
# Coordinate with other developers to avoid conflicts!

# Developer Information
DEV_NAME=${DEV_NAME}
DEV_PASSWORD=${DEV_PASSWORD}
DEV_SESSION_SECRET=${DEV_SESSION_SECRET}

# Shared Discord Bot Configuration
BOT_TOKEN=${SHARED_BOT_TOKEN}
CLIENT_ID=${SHARED_CLIENT_ID}
TEST_GUILD_ID=${SHARED_GUILD_ID}
BOT_OWNER_ID=${BOT_OWNER_ID}

# Bot Customization (unique per developer)
BOT_NAME=WardenPrime-Dev-${DEV_NAME}
BOT_PREFIX=!
EMBED_COLOR=5865F2
EMBED_FOOTER=Powered by WardenPrime (Dev - ${DEV_NAME})

# Feature Flags
ENABLE_COOLDOWNS=true
ENABLE_MENTIONS=true
ENABLE_LOGGING=true
LOG_LEVEL=DEBUG
SKIP_COMMAND_REGISTRATION=false

# Command Deployment (guild-specific for shared development)
COMMAND_DEPLOYMENT_MODE=guild
DEPLOYMENT_GUILD_IDS=${SHARED_GUILD_ID}

# Database Configuration (isolated per developer)
DATABASE_TYPE=postgres
PG_HOST=postgres
PG_PORT=5432
PG_DATABASE=wardenprime_dev_${DEV_NAME}
PG_USER=${DEV_NAME}
PG_PASSWORD=${DEV_PASSWORD}
PG_SSL_MODE=disable

# Dashboard Configuration
DASHBOARD_ENABLED=true
DASHBOARD_PORT=3080
DASHBOARD_PUBLIC_URL=http://localhost:3080
DASHBOARD_SESSION_SECRET=${DEV_SESSION_SECRET}
OAUTH_CALLBACK_URL=http://localhost:3080/auth/callback

# Environment
NODE_ENV=development
EOF

echo "✅ Created .env file"

# Create docker-compose override for shared development
echo "📝 Creating Docker Compose override for shared development..."
cat > docker-compose.override.yml << EOF
# Shared Development Docker Compose Override
# This file allows each developer to have their own database while sharing the Discord server

version: '3.8'

services:
  # PostgreSQL Database (Isolated per developer)
  postgres:
    environment:
      POSTGRES_DB: wardenprime_dev_${DEV_NAME}
      POSTGRES_USER: ${DEV_NAME}
      POSTGRES_PASSWORD: ${DEV_PASSWORD}
    volumes:
      - postgres_data_${DEV_NAME}:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # Discord Bot (Shared server, isolated database)
  bot:
    environment:
      # Development settings
      NODE_ENV: development
      LOG_LEVEL: DEBUG
      
      # Database (isolated per developer)
      PG_DATABASE: wardenprime_dev_${DEV_NAME}
      PG_USER: ${DEV_NAME}
      PG_PASSWORD: ${DEV_PASSWORD}
      
      # Bot settings (unique per developer)
      BOT_NAME: WardenPrime-Dev-${DEV_NAME}
      EMBED_FOOTER: Powered by WardenPrime (Dev - ${DEV_NAME})
      
      # Command deployment (guild-specific for shared development)
      COMMAND_DEPLOYMENT_MODE: guild
      DEPLOYMENT_GUILD_IDS: ${SHARED_GUILD_ID}
      
      # Dashboard (useful for development)
      DASHBOARD_ENABLED: true
      DASHBOARD_PORT: 3080
      DASHBOARD_SESSION_SECRET: ${DEV_SESSION_SECRET}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "3080:3080"

  # Dashboard (Development)
  dashboard:
    environment:
      NODE_ENV: development
      DASHBOARD_PORT: 3080
      DASHBOARD_SESSION_SECRET: ${DEV_SESSION_SECRET}
    ports:
      - "3080:3080"
    profiles:
      - dashboard

volumes:
  postgres_data_${DEV_NAME}:
    driver: local
EOF

echo "✅ Created docker-compose.override.yml"

# Create necessary directories
echo "📁 Creating directories..."
mkdir -p logs data

echo "✅ Created directories"

# Create bot coordination file
echo "📝 Creating bot coordination system..."
cat > .bot-coordination << EOF
# Bot Coordination File
# This file helps coordinate bot usage between developers

CURRENT_USER=${DEV_NAME}
LAST_ACTIVE=$(date)
STATUS=available

# To check if bot is available:
# grep "STATUS=available" .bot-coordination

# To claim bot access:
# echo "CURRENT_USER=your_name" > .bot-coordination
# echo "STATUS=in_use" >> .bot-coordination

# To release bot access:
# echo "STATUS=available" > .bot-coordination
EOF

echo "✅ Created bot coordination system"

echo ""
echo "🎉 Shared development setup complete!"
echo ""
echo "📋 Your shared development environment:"
echo "   Developer: ${DEV_NAME}"
echo "   Database: wardenprime_dev_${DEV_NAME} (isolated)"
echo "   Discord Server: ${SHARED_GUILD_ID} (shared)"
echo "   Dashboard: http://localhost:3080"
echo "   Bot Name: WardenPrime-Dev-${DEV_NAME}"
echo ""
echo "🤝 Coordination with other developers:"
echo "   - Check bot availability: grep 'STATUS=available' .bot-coordination"
echo "   - Claim bot access: echo 'CURRENT_USER=${DEV_NAME}' > .bot-coordination"
echo "   - Release bot access: echo 'STATUS=available' > .bot-coordination"
echo ""
echo "🚀 To start development:"
echo "   ./docker-start.sh"
echo ""
echo "📝 Important notes:"
echo "   - Coordinate with other developers before starting the bot"
echo "   - Each developer has their own isolated database"
echo "   - Use the same Discord server for testing"
echo "   - Release bot access when done developing"
echo ""
echo "💡 Pro tip: Create a Discord channel for development coordination!"
echo ""
